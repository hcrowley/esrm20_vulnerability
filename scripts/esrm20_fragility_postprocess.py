#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 16 16:10:41 2021

@author: helencrowley
"""

import pandas as pd
import os
import glob
import numpy as np

#%% read list of typologies from capacity curves

current_dir=os.getcwd()
cap_in_files=glob.glob(os.path.join(os.path.join(current_dir,'../ESRM20_capacity_curves','*.csv')))

#%% calculate lognormal parameters of fragility functions for PGA

PGA = pd.DataFrame(columns=['Typology','Median_DS1','Median_DS2','Median_DS3','Median_DS4','Beta'])

PGA_DS1 = np.zeros(len(cap_in_files))
PGA_DS2 = np.zeros(len(cap_in_files))
PGA_DS3 = np.zeros(len(cap_in_files))
PGA_DS4 = np.zeros(len(cap_in_files))
PGA_Disp = np.zeros(len(cap_in_files))
Class = np.empty([len(cap_in_files)],dtype='<U25')

for i in range(len(cap_in_files)):

    cap_file=cap_in_files[i]
    building_class=cap_file.split('/')[-1].split('\\')[-1].split('.')[0][10:]
    
    reg_file_PGA=os.path.join(current_dir,'vmtk','outputs','regression',building_class,'regression_coeff_PGA'+'.csv')
    reg_PGA=pd.read_csv(reg_file_PGA, names=['parameters','values'], header=None)
    
    Class[i] = building_class
    
    PGA_DS1[i] = np.exp((np.log(reg_PGA['values'][3])-reg_PGA['values'][0])/reg_PGA['values'][1])
    PGA_DS2[i] = np.exp((np.log(reg_PGA['values'][4])-reg_PGA['values'][0])/reg_PGA['values'][1])
    PGA_DS3[i] = np.exp((np.log(reg_PGA['values'][5])-reg_PGA['values'][0])/reg_PGA['values'][1])
    PGA_DS4[i] = np.exp((np.log(reg_PGA['values'][6])-reg_PGA['values'][0])/reg_PGA['values'][1])
    PGA_Disp[i] = ((reg_PGA['values'][2]/reg_PGA['values'][1])**2 + 0.3**2)**0.5 # add building to building variability

PGA['Median_DS1'] = PGA_DS1
PGA['Median_DS2'] = PGA_DS2
PGA['Median_DS3'] = PGA_DS3
PGA['Median_DS4'] = PGA_DS4
PGA['Beta'] = PGA_Disp
PGA['Typology'] = Class
PGA = PGA.sort_values('Typology')

#%% calculate lognormal parameters of fragility functions for SA(0.3)

SA03 = pd.DataFrame(columns=['Typology','Median_DS1','Median_DS2','Median_DS3','Median_DS4','Beta'])

SA03_DS1 = np.zeros(len(cap_in_files))
SA03_DS2 = np.zeros(len(cap_in_files))
SA03_DS3 = np.zeros(len(cap_in_files))
SA03_DS4 = np.zeros(len(cap_in_files))
SA03_Disp = np.zeros(len(cap_in_files))
Class = np.empty([len(cap_in_files)],dtype='<U25')

for i in range(len(cap_in_files)):

    cap_file=cap_in_files[i]
    building_class=cap_file.split('/')[-1].split('\\')[-1].split('.')[0][10:]
    
    reg_file_SA03=os.path.join(current_dir,'vmtk','outputs','regression',building_class,'regression_coeff_SA(0.3)'+'.csv')
    reg_SA03=pd.read_csv(reg_file_SA03, names=['parameters','values'], header=None)
    
    Class[i] = building_class
    
    SA03_DS1[i] = np.exp((np.log(reg_SA03['values'][3])-reg_SA03['values'][0])/reg_SA03['values'][1])
    SA03_DS2[i] = np.exp((np.log(reg_SA03['values'][4])-reg_SA03['values'][0])/reg_SA03['values'][1])
    SA03_DS3[i] = np.exp((np.log(reg_SA03['values'][5])-reg_SA03['values'][0])/reg_SA03['values'][1])
    SA03_DS4[i] = np.exp((np.log(reg_SA03['values'][6])-reg_SA03['values'][0])/reg_SA03['values'][1])
    SA03_Disp[i] = ((reg_SA03['values'][2]/reg_SA03['values'][1])**2 + 0.3**2)**0.5 # add building to building variability
        
    
SA03['Median_DS1'] = SA03_DS1
SA03['Median_DS2'] = SA03_DS2
SA03['Median_DS3'] = SA03_DS3
SA03['Median_DS4'] = SA03_DS4
SA03['Beta'] = SA03_Disp
SA03['Typology'] = Class
SA03 = SA03.sort_values('Typology')

#%% calculate lognormal parameters of fragility functions for SA(0.6)

SA06 = pd.DataFrame(columns=['Typology','Median_DS1','Median_DS2','Median_DS3','Median_DS4','Beta'])

SA06_DS1 = np.zeros(len(cap_in_files))
SA06_DS2 = np.zeros(len(cap_in_files))
SA06_DS3 = np.zeros(len(cap_in_files))
SA06_DS4 = np.zeros(len(cap_in_files))
SA06_Disp = np.zeros(len(cap_in_files))
Class = np.empty([len(cap_in_files)],dtype='<U25')

for i in range(len(cap_in_files)):

    cap_file=cap_in_files[i]
    building_class=cap_file.split('/')[-1].split('\\')[-1].split('.')[0][10:]
    
    reg_file_SA06=os.path.join(current_dir,'vmtk','outputs','regression',building_class,'regression_coeff_SA(0.6)'+'.csv')
    reg_SA06=pd.read_csv(reg_file_SA06, names=['parameters','values'], header=None)
    
    Class[i] = building_class
    
    SA06_DS1[i] = np.exp((np.log(reg_SA06['values'][3])-reg_SA06['values'][0])/reg_SA06['values'][1])
    SA06_DS2[i] = np.exp((np.log(reg_SA06['values'][4])-reg_SA06['values'][0])/reg_SA06['values'][1])
    SA06_DS3[i] = np.exp((np.log(reg_SA06['values'][5])-reg_SA06['values'][0])/reg_SA06['values'][1])
    SA06_DS4[i] = np.exp((np.log(reg_SA06['values'][6])-reg_SA06['values'][0])/reg_SA06['values'][1])
    SA06_Disp[i] = ((reg_SA06['values'][2]/reg_SA06['values'][1])**2 + 0.3**2)**0.5 # add building to building variability
        
    
SA06['Median_DS1'] = SA06_DS1
SA06['Median_DS2'] = SA06_DS2
SA06['Median_DS3'] = SA06_DS3
SA06['Median_DS4'] = SA06_DS4
SA06['Beta'] = SA06_Disp
SA06['Typology'] = Class
SA06 = SA06.sort_values('Typology')

#%% calculate lognormal parameters of fragility functions for SA(1.0)

SA10 = pd.DataFrame(columns=['Typology','Median_DS1','Median_DS2','Median_DS3','Median_DS4','Beta'])

SA10_DS1 = np.zeros(len(cap_in_files))
SA10_DS2 = np.zeros(len(cap_in_files))
SA10_DS3 = np.zeros(len(cap_in_files))
SA10_DS4 = np.zeros(len(cap_in_files))
SA10_Disp = np.zeros(len(cap_in_files))
Class = np.empty([len(cap_in_files)],dtype='<U25')

for i in range(len(cap_in_files)):

    cap_file=cap_in_files[i]
    building_class=cap_file.split('/')[-1].split('\\')[-1].split('.')[0][10:]
    
    reg_file_SA10=os.path.join(current_dir,'vmtk','outputs','regression',building_class,'regression_coeff_SA(1.0)'+'.csv')
    reg_SA10=pd.read_csv(reg_file_SA10, names=['parameters','values'], header=None)
    
    Class[i] = building_class
    
    SA10_DS1[i] = np.exp((np.log(reg_SA10['values'][3])-reg_SA10['values'][0])/reg_SA10['values'][1])
    SA10_DS2[i] = np.exp((np.log(reg_SA10['values'][4])-reg_SA10['values'][0])/reg_SA10['values'][1])
    SA10_DS3[i] = np.exp((np.log(reg_SA10['values'][5])-reg_SA10['values'][0])/reg_SA10['values'][1])
    SA10_DS4[i] = np.exp((np.log(reg_SA10['values'][6])-reg_SA10['values'][0])/reg_SA10['values'][1])
    SA10_Disp[i] = ((reg_SA10['values'][2]/reg_SA10['values'][1])**2 + 0.3**2)**0.5 # add building to building variability
        
    
SA10['Median_DS1'] = SA10_DS1
SA10['Median_DS2'] = SA10_DS2
SA10['Median_DS3'] = SA10_DS3
SA10['Median_DS4'] = SA10_DS4
SA10['Beta'] = SA10_Disp
SA10['Typology'] = Class
SA10 = SA10.sort_values('Typology')

#%% check most efficient IM considering all IMs and those available in ShakeMap

IMT = pd.DataFrame(columns=['Typology','IMT','IMT_ShakeMap'])
FINAL = pd.DataFrame(columns=['Typology','IMT','Median_DS1','Median_DS2','Median_DS3','Median_DS4','Beta'])
SM = pd.DataFrame(columns=['Typology','IMT','Median_DS1','Median_DS2','Median_DS3','Median_DS4','Beta'])

Eff = np.zeros(len(cap_in_files))
Median_DS1 = np.zeros(len(cap_in_files))
Median_DS2 = np.zeros(len(cap_in_files))
Median_DS3 = np.zeros(len(cap_in_files))
Median_DS4 = np.zeros(len(cap_in_files))
Beta = np.zeros(len(cap_in_files))
IM = np.empty([len(cap_in_files)],dtype='<U10')
for i in range(len(cap_in_files)):
    a_list = [PGA.Beta[i],SA03.Beta[i],SA06.Beta[i],SA10.Beta[i]]
    Eff[i] = min(a_list)
    min_index = a_list.index(Eff[i])
    if min_index == 0:
        IM[i] = 'PGA'
        Median_DS1[i] = PGA.Median_DS1[i]
        Median_DS2[i] = PGA.Median_DS2[i]
        Median_DS3[i] = PGA.Median_DS3[i]
        Median_DS4[i] = PGA.Median_DS4[i]
        Beta[i] = PGA.Beta[i]
    elif min_index == 1:
        IM[i] = 'SA(0.3)'
        Median_DS1[i] = SA03.Median_DS1[i]
        Median_DS2[i] = SA03.Median_DS2[i]
        Median_DS3[i] = SA03.Median_DS3[i]
        Median_DS4[i] = SA03.Median_DS4[i]
        Beta[i] = SA03.Beta[i]
    elif min_index == 2:
        IM[i] = 'SA(0.6)'
        Median_DS1[i] = SA06.Median_DS1[i]
        Median_DS2[i] = SA06.Median_DS2[i]
        Median_DS3[i] = SA06.Median_DS3[i]
        Median_DS4[i] = SA06.Median_DS4[i]
        Beta[i] = SA06.Beta[i]
    else:
        IM[i] = 'SA(1.0)'
        Median_DS1[i] = SA10.Median_DS1[i]
        Median_DS2[i] = SA10.Median_DS2[i]
        Median_DS3[i] = SA10.Median_DS3[i]
        Median_DS4[i] = SA10.Median_DS4[i]
        Beta[i] = SA10.Beta[i]
    

FINAL.Typology = Class
FINAL.IMT = IM
FINAL.Median_DS1 = Median_DS1
FINAL.Median_DS2 = Median_DS2
FINAL.Median_DS3 = Median_DS3
FINAL.Median_DS4 = Median_DS4
FINAL.Beta = Beta
FINAL = FINAL.sort_values('Typology')

Eff_SM = np.zeros(len(cap_in_files))
IM_SM = np.empty([len(cap_in_files)],dtype='<U10')
for i in range(len(cap_in_files)):
    a_list2 = [PGA.Beta[i],SA03.Beta[i],SA10.Beta[i]]
    Eff_SM[i] = min(a_list2)
    min_index2 = a_list2.index(Eff_SM[i])
    if min_index2 == 0:
        IM_SM[i] = 'PGA'
        Median_DS1[i] = PGA.Median_DS1[i]
        Median_DS2[i] = PGA.Median_DS2[i]
        Median_DS3[i] = PGA.Median_DS3[i]
        Median_DS4[i] = PGA.Median_DS4[i]
        Beta[i] = PGA.Beta[i]
    elif min_index2 == 1:
        IM_SM[i] = 'SA(0.3)'
        Median_DS1[i] = SA03.Median_DS1[i]
        Median_DS2[i] = SA03.Median_DS2[i]
        Median_DS3[i] = SA03.Median_DS3[i]
        Median_DS4[i] = SA03.Median_DS4[i]
        Beta[i] = SA03.Beta[i]
    else:
        IM_SM[i] = 'SA(1.0)'
        Median_DS1[i] = SA10.Median_DS1[i]
        Median_DS2[i] = SA10.Median_DS2[i]
        Median_DS3[i] = SA10.Median_DS3[i]
        Median_DS4[i] = SA10.Median_DS4[i]
        Beta[i] = SA10.Beta[i]


IMT.Typology = Class
IMT.IMT = IM
IMT.IMT_ShakeMap = IM_SM

SM.Typology = Class
SM.IMT = IM_SM
SM.Median_DS1 = Median_DS1
SM.Median_DS2 = Median_DS2
SM.Median_DS3 = Median_DS3
SM.Median_DS4 = Median_DS4
SM.Beta = Beta
SM = SM.sort_values('Typology')

#%% write Excel file

writer=pd.ExcelWriter('../esrm20_fragility_various_IM_lognormal.xlsx', engine='xlsxwriter')
PGA.to_excel(writer,sheet_name='PGA', header=True, index=False, startrow=0, startcol=0)
SA03.to_excel(writer,sheet_name='SA(0.3s)', header=True, index=False, startrow=0, startcol=0)
SA06.to_excel(writer,sheet_name='SA(0.6s)', header=True, index=False, startrow=0, startcol=0)
SA10.to_excel(writer,sheet_name='SA(1.0s)', header=True, index=False, startrow=0, startcol=0)
IMT.to_excel(writer,sheet_name='IMT', header=True, index=False, startrow=0, startcol=0)
FINAL.to_excel(writer,sheet_name='Final', header=True, index=False, startrow=0, startcol=0)
SM.to_excel(writer,sheet_name='ShakeMap', header=True, index=False, startrow=0, startcol=0)

writer.save()

    

#%% write csv files for viewer

(pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='PGA')).to_csv('../viewer/ESRM20_fragility_PGA.csv')
(pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='SA(0.3s)')).to_csv('../viewer/ESRM20_fragility_SA03.csv')
(pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='SA(0.6s)')).to_csv('../viewer/ESRM20_fragility_SA06.csv')
(pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='SA(1.0s)')).to_csv('../viewer/ESRM20_fragility_SA10.csv')

    
    