#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul 17 19:04:01 2021

@author: helencrowley
"""
import glob
import os
import pandas as pd
import numpy as np
from scipy import stats


#%% read list of typologies from capacity curves

current_dir=os.getcwd()
cap_in_files=glob.glob(os.path.join(os.path.join(current_dir,'../ESRM20_capacity_curves','*.csv')))
cap_in_files=sorted(cap_in_files)

#%% read fragility data

fragility_PGA = pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='PGA')
fragility_SA03 = pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='SA(0.3s)')
fragility_SA06 = pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='SA(0.6s)')
fragility_SA10 = pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='SA(1.0s)')
fragility_final = pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='Final')
fragility_ShakeMap = pd.read_excel('../esrm20_fragility_various_IM_lognormal.xlsx',sheet_name='ShakeMap')

#%%  damage-loss model for loss of life

dam2loss= pd.read_excel('fatality_damage_model_ESRM20.xlsx')
p_fatcol_com = dam2loss['P_lethal-building | DS4']
coll_factor = dam2loss['Collapse_factor']
p_entrap_fatcol_day = dam2loss['P_entrapment_day']
p_entrap_fatcol_night = dam2loss['P_entrapment_night']
p_entrap_fatcol = (p_entrap_fatcol_day+p_entrap_fatcol_night)/2;
fat_entrap = dam2loss['P_loss-life | entrapment']
fat_ratio_day = p_fatcol_com * coll_factor * p_entrap_fatcol_day * fat_entrap
fat_ratio_night = p_fatcol_com * coll_factor * p_entrap_fatcol_night * fat_entrap
fat_ratio_ave = p_fatcol_com * coll_factor * p_entrap_fatcol * fat_entrap

#%% calculate vulnerability for all IMs

vuln_PGA = np.zeros([len(cap_in_files),50])
vuln_SA03 = np.zeros([len(cap_in_files),50])
vuln_SA06 = np.zeros([len(cap_in_files),50])
vuln_SA10 = np.zeros([len(cap_in_files),50])
Class = np.empty([len(cap_in_files)],dtype='<U25')

for k in range(len(cap_in_files)):
    cap_file=cap_in_files[k]
    building_class=cap_file.split('/')[-1].split('\\')[-1].split('.')[0][10:]
    Class[k] = building_class
    x_vec = np.linspace(np.log(0.01),np.log(5),endpoint=True)
    #PGA
    reg_file_PGA=os.path.join(current_dir,'vmtk','outputs','regression',building_class,'regression_coeff_PGA'+'.csv')
    reg_PGA=pd.read_csv(reg_file_PGA, names=['parameters','values'], header=None)
    damage_thresholds = reg_PGA['values'][6]
    probability_damage_state=np.zeros([len(x_vec)])
    for i in range(len(x_vec)):
        mu=reg_PGA['values'][1]*x_vec[i]+reg_PGA['values'][0]
        probability_damage_state[i]=1-(stats.norm.cdf(np.log(damage_thresholds),loc=mu,scale=reg_PGA['values'][2]))
            
    vuln_PGA[k,:]= fat_ratio_ave[k]*probability_damage_state
    
    
    #SA03
    reg_file_SA03=os.path.join(current_dir,'vmtk','outputs','regression',building_class,'regression_coeff_SA(0.3)'+'.csv')
    reg_SA03=pd.read_csv(reg_file_SA03, names=['parameters','values'], header=None)
    damage_thresholds = reg_SA03['values'][6]
    probability_damage_state=np.zeros([len(x_vec)])
    for i in range(len(x_vec)):
        mu=reg_SA03['values'][1]*x_vec[i]+reg_SA03['values'][0]
        probability_damage_state[i]=1-(stats.norm.cdf(np.log(damage_thresholds),loc=mu,scale=reg_SA03['values'][2]))
            
    vuln_SA03[k,:]= fat_ratio_ave[k]*probability_damage_state
    
    #SA06
    reg_file_SA06=os.path.join(current_dir,'vmtk','outputs','regression',building_class,'regression_coeff_SA(0.6)'+'.csv')
    reg_SA06=pd.read_csv(reg_file_SA06, names=['parameters','values'], header=None)
    damage_thresholds = reg_SA06['values'][6]
    probability_damage_state=np.zeros([len(x_vec)])
    for i in range(len(x_vec)):
        mu=reg_SA06['values'][1]*x_vec[i]+reg_SA06['values'][0]        
        probability_damage_state[i]=1-(stats.norm.cdf(np.log(damage_thresholds),loc=mu,scale=reg_SA06['values'][2]))
            
    vuln_SA06[k,:]= fat_ratio_ave[k]*probability_damage_state
            
    #SA10
    reg_file_SA10=os.path.join(current_dir,'vmtk','outputs','regression',building_class,'regression_coeff_SA(1.0)'+'.csv')
    reg_SA10=pd.read_csv(reg_file_SA10, names=['parameters','values'], header=None)
    damage_thresholds = reg_SA10['values'][6]
    probability_damage_state=np.zeros([len(x_vec)])
    for i in range(len(x_vec)):
        mu=reg_SA10['values'][1]*x_vec[i]+reg_SA10['values'][0]
        probability_damage_state[i]=1-(stats.norm.cdf(np.log(damage_thresholds),loc=mu,scale=reg_SA10['values'][2]))
            
    vuln_SA10[k,:]= fat_ratio_ave[k]*probability_damage_state
 
    
    
#%% write Excel sheets for viewer

out_PGA = pd.DataFrame(vuln_PGA)
out_SA03 = pd.DataFrame(vuln_SA03)
out_SA06 = pd.DataFrame(vuln_SA06)
out_SA10 = pd.DataFrame(vuln_SA10)
imls_PGA = pd.DataFrame(np.exp(x_vec), columns=['PGA'])
imls_SA03 = pd.DataFrame(np.exp(x_vec), columns=['SA(0.3)'])
imls_SA06 = pd.DataFrame(np.exp(x_vec), columns=['SA(0.6)'])
imls_SA10 = pd.DataFrame(np.exp(x_vec), columns=['SA(1.0)'])

typ = pd.DataFrame(Class)


writer=pd.ExcelWriter('../esrm20_vulnerability_loss-of-life.xlsx', engine='xlsxwriter')    
imls_PGA.to_excel(writer,sheet_name='PGA', header=True, index=False, startrow=0, startcol=0)
typ.T.to_excel(writer,sheet_name='PGA', header=False, index=False, startrow=0, startcol=1)
out_PGA.T.to_excel(writer,sheet_name='PGA', header=False, index=False, startrow=1, startcol=1)
imls_SA03.to_excel(writer,sheet_name='SA(0.3s)', header=True, index=False, startrow=0, startcol=0)
typ.T.to_excel(writer,sheet_name='SA(0.3s)', header=False, index=False, startrow=0, startcol=1)
out_SA03.T.to_excel(writer,sheet_name='SA(0.3s)', header=False, index=False, startrow=1, startcol=1)
imls_SA06.to_excel(writer,sheet_name='SA(0.6s)', header=True, index=False, startrow=0, startcol=0)
typ.T.to_excel(writer,sheet_name='SA(0.6s)', header=False, index=False, startrow=0, startcol=1)
out_SA06.T.to_excel(writer,sheet_name='SA(0.6s)', header=False, index=False, startrow=1, startcol=1)
imls_SA10.to_excel(writer,sheet_name='SA(1.0s)', header=True, index=False, startrow=0, startcol=0)
typ.T.to_excel(writer,sheet_name='SA(1.0s)', header=False, index=False, startrow=0, startcol=1)
out_SA10.T.to_excel(writer,sheet_name='SA(1.0s)', header=False, index=False, startrow=1, startcol=1)

writer.save()
