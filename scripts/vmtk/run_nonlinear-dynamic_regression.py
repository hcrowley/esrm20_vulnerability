# -*- coding: utf-8 -*-
"""
Created on Fri Feb 14 09:34:16 2020

@author: LuisMartins
modified by: HelenCrowley 6th August 2021
"""
#%% import rmtk modules

import select_gmrs_start as selgmrs
import fragility_vulnerability as fvb
import nlth as nlth

#%% import other modules 

import os 
import numpy as np
import glob
import pandas as pd
import matplotlib.pyplot as plt

# %% get input files

current_dir=os.getcwd()

cap_in_files=glob.glob(os.path.join(os.path.join(current_dir,'../../ESRM20_capacity_curves','*.csv')))
gmrs_in_files=glob.glob(os.path.join(os.path.join(current_dir,'gmrs','*.csv')))


# %% run nlth (four different IMs)

ims_periods=np.array([0,0.3,0.6,1])

disps_array=np.zeros([len(gmrs_in_files),len(cap_in_files)])
accels_array=np.zeros([len(gmrs_in_files),len(cap_in_files)])
imls_array=np.zeros([len(gmrs_in_files),len(ims_periods)])

counter = 0
for i in range(len(cap_in_files)):

      counter+=1
      print('Percentage= '+str(counter/float(len(cap_in_files))*100)+'%') 
      
      cap_file=cap_in_files[i]
      building_class=cap_file.split('/')[-1].split('\\')[-1].split('.')[0][10:]
      
      cap_array=np.loadtxt(cap_file,dtype=float,delimiter=',',skiprows=1)
      damp = pd.read_excel('damping/damping.xlsx', header=0)
      damp_ratio = float(damp.Ratio[damp.Taxonomy == building_class].to_numpy())
      degrad = (damp.Degrad[damp.Taxonomy == building_class].to_numpy())

      if not os.path.exists(os.path.join(current_dir,'outputs','nonlinear_dynamic',building_class)):
            os.makedirs(os.path.join(current_dir,'outputs','nonlinear_dynamic',building_class))
            
      for j in range(len(gmrs_in_files)):
            
            gmr_nlth=np.loadtxt(gmrs_in_files[j],delimiter=',')
            
            _, Sa=selgmrs.NewmarkBeta(gmr_nlth[:,0],gmr_nlth[:,1]*9.81,ims_periods,0.05)
            imls_array[j]=Sa
            _,disps,accels=nlth.run_nlth_analysis_on_sdof_ops_py(cap_array,gmr_nlth,damp_ratio,degrad)
            disps_array[j,i]=np.max(np.abs(disps))
            accels_array[j,i]=np.max(np.abs(accels))
            
      np.savetxt(os.path.join(current_dir,'outputs','nonlinear_dynamic','imls.csv'),imls_array,delimiter=',')
      np.savetxt(os.path.join(current_dir,'outputs','nonlinear_dynamic',building_class,'max_disps.csv'),disps_array[:,i],delimiter=',')
      np.savetxt(os.path.join(current_dir,'outputs','nonlinear_dynamic',building_class,'max_accels.csv'),accels_array[:,i],delimiter=',')

# %% run regression

counter = 0
for i in range(len(cap_in_files)):
      
      counter+=1
      print('Percentage= '+str(counter/float(len(cap_in_files))*100)+'%')
      
      cap_file=cap_in_files[i]
      building_class=cap_file.split('/')[-1].split('\\')[-1].split('.')[0][10:]
      
      if not os.path.exists(os.path.join(current_dir,'outputs','regression',building_class)):
            os.makedirs(os.path.join(current_dir,'outputs','regression',building_class))
            
      cap_array=np.loadtxt(cap_file,dtype=float,delimiter=',',skiprows=1)
      
      if cap_array.shape[0]>=4:
          dam_model_drift=[0.75*cap_array[2,0],\
                           0.5*cap_array[2,0]+0.33*cap_array[-1,0],\
                           0.25*cap_array[2,0]+0.67*cap_array[-1,0],\
                           cap_array[-1,0]]
          low_disp_limit = 0.1*cap_array[2,0]
      else:
          dam_model_drift=[0.75*cap_array[1,0],\
                           0.5*cap_array[1,0]+0.33*cap_array[-1,0],\
                           0.25*cap_array[1,0]+0.67*cap_array[-1,0],\
                           cap_array[-1,0]]
          low_disp_limit = 0.1*cap_array[1,0]
          
      imls_file=os.path.join(current_dir,'outputs','nonlinear_dynamic','imls'+'.csv')
      imls_array=np.loadtxt(imls_file,delimiter=',')
      disps_file=os.path.join(current_dir,'outputs','nonlinear_dynamic',building_class,'max_disps'+'.csv')
      edps_array=np.loadtxt(disps_file,delimiter=',')
      
      for j in range(len(ims_periods)):
            imls=imls_array[:,j]
            edps=edps_array
            b1,b0,sigma=fvb.fragility_censored_cloud_analysis(imls,edps,\
                        dam_model_drift,low_disp_limit,(1.5*cap_array[-1,0]))
            
            fig=plt.figure()
            plt.title(building_class)
            xvec = np.linspace(np.log(min(imls)),np.log(max(imls)),endpoint=True)
            plt.plot(np.log(imls),np.log(edps),'o')
            plt.plot(xvec,b1*xvec+b0, c='#1f77b4')
            plt.ylabel('ln(Sd)')
        
            plt.plot([min(xvec), max(xvec)],[np.log(1.5*dam_model_drift[3]),np.log(1.5*dam_model_drift[3])],'--',color='k')
            plt.plot([min(xvec), max(xvec)],[np.log(low_disp_limit),np.log(low_disp_limit)],'-.',color='k')
            plt.legend(['Nonlinear data','Censored regression','Censored regression limit','Lowest displacement for regression'],prop={'size': 7})
            
            
            if j==0:
                np.savetxt(os.path.join(current_dir,'outputs','regression',\
                                        building_class,'regression_coeff_'+'PGA'+'.csv'),\
                                       [(['b0'],b0),(['b1'],b1),(['sigma'],sigma),(['ds1'],\
                                       dam_model_drift[0]),(['ds2'],dam_model_drift[1]),\
                                        (['ds3'],dam_model_drift[2]),(['ds4'],\
                                        dam_model_drift[3])],delimiter=',',fmt=['%s','%f'])
                plt.xlabel('ln(PGA)')
                plt.savefig(os.path.join(current_dir,'outputs','regression',building_class,\
                                        'regression_'+'PGA'+'.png'),dpi=300)
            else:
                np.savetxt(os.path.join(current_dir,'outputs','regression',building_class,\
                                        'regression_coeff_'+'SA('+str(ims_periods[j])+').csv'),\
                                       [(['b0'],b0),(['b1'],b1),(['sigma'],sigma),(['ds1'],\
                                       dam_model_drift[0]),(['ds2'],dam_model_drift[1]),\
                                        (['ds3'],dam_model_drift[2]),(['ds4'],\
                                      dam_model_drift[3])],delimiter=',',fmt=['%s','%f'])
                plt.xlabel('ln(SA('+str(ims_periods[j])+')[g])')
                plt.savefig(os.path.join(current_dir,'outputs','regression',building_class,\
                                         'regression_'+'SA('+str(ims_periods[j])+').png'),dpi=300)

